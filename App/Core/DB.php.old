<?php

/**
*
*/
class DB {
	private static $_instance = null;
	private $_pdo, 
			$_query, 
			$_error = false, 
			$_results, 
			$_count = 0;

	private function __construct(){
		try{
			$this->_pdo = new PDO('mysql:host='.Config::get('mysql/host').';dbname='.Config::get('mysql/name'),Config::get('mysql/user'),Config::get('mysql/pass'), array(PDO::ATTR_PERSISTENT => true));
			$this->_pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
			$this->_pdo->exec('set names utf8');
			// echo "Connected";
		}catch(PDOException $e){
			die($e->getMessage());
			// echo $e->getMessage();
		}
	}

	public static function ready(){
		if(!isset(self::$_instance)){
			self::$_instance = new DB();
		}
		return self::$_instance;
	}

	public function query($sql,$params=[]){

		$this->_error = false;

		if($this->_query = $this->_pdo->prepare($sql)){
			
			$x = 1;
			if(count($params)){
				foreach ($params as $param) {
					$this->_query->bindValue($x,$param);
					$x++;
				}
			}

			if( $this->_query->execute() ){
				$this->_results = $this->_query->fetchAll(PDO::FETCH_OBJ);
				$this->_count 	= $this->_query->rowCount();
			}else{
				$this->_error = true;
			}

		}

		return $this;
	}

	private function action($action,$table,$where=[]){
		if(count($where) === 3){
			$operators = ['=','>','<','>=','<=','!='];
			$field 		= $where[0];
			$operator 	= $where[1];
			$value 		= $where[2];

			if(in_array($operator, $operators)){
				$sql = "{$action} FROM {$table} WHERE {$field} {$operator} ?";
				if( !$this->query($sql,[$value])->error() ){
					return $this;
				}
			}
		}
		return false;
	}

	// get method
	public function get($table,$where){
		return $this->action('SELECT *',$table, $where);
	}

	// delete
	public function delete($table, $where){
		return $this->action('DELETE',$table, $where);
	}

	// okay
	public function insert($table, $fields=[]){
		if(count($fields)){
			$keys 	= array_keys($fields);
			$values = null;			
			$x 		= 1;
			foreach ( $fields as $field ) {
				$values .= '?';
				if($x < count($fields)) {
					$values .= ', ';
				}
				$x++;
			}

			$sql = "INSERT INTO {$table} (`". implode('`, `', $keys) ."`) VALUES ({$values})";

			// if doesn't error return true
			if( !$this->query($sql,$fields)->error() ){
				return true;
			}
		}
		return false;
	}

	public function update($table, $id, $idRef, $fields=[]){
		$set 	= '';
		$x		= 1;

		foreach ($fields as $name => $value) {
			$set .= "{$name} = ?";
			if($x < count($fields)){
				$set .= ", ";
			}
			$x++;
		}

		$sql 	= "UPDATE {$table} SET {$set} WHERE {$id} = {$idRef}";
		// die($sql);

		if( !$this->query($sql,$fields)->error() ){
			return true;
		}

		return false;
	}

	// return the query results multiple objects
	public function results(){
		if($this->count()){
			return $this->_results;
		}
		return false;
	}

	// return the query result only one object
	public function first(){
		if($this->count()){
			return $this->results()[0];
		}
		return false;
	}

	// return error
	public function error(){
		return $this->_error;
	}

	// return count
	public function count(){
		return $this->_count;
	}

	public static function raw($sql,$params=[]){
		return self::ready()->query($sql,$params=[]);
	}
}
